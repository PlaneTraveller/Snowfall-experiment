{ options, config, lib, inputs, osConfig ? { }, ... }:
with lib;
with lib.literacy;
let cfg = config.literacy.home;
in {

  # imports = with inputs;
  #   [
  #     home-manager.homesModules.home-manager
  #     # nix-colors.homeManagerModules.default
  #     # prism.homeModules.prism
  # ];

  options.home = with types; {
    file = mkOpt attrs { }
      "A set of files to be managed by home-manager's <option>home.file</option>.";
    configFile = mkOpt attrs { }
      "A set of files to be managed by home-manager's <option>xdg.configFile</option>.";
    programs = mkOpt attrs { } "Programs to be managed by home-manager.";
    extraOptions = mkOpt attrs { } "Options to pass directly to home-manager.";

    # persist = mkOpt attrs {} "Files and directories to persist in the home";
  };

  config = {

    home.extraOptions = {
      home.stateVersion =
        lib.mkDefault (osConfig.system.stateVersion or "23.11");
      home.file = mkAliasDefinitions options.home.file;
      xdg.enable = true;
      xdg.configFile = mkAliasDefinitions options.home.configFile;
      programs = mkAliasDefinitions options.home.programs;
    };

    home-manager = {
      useUserPackages = true;
      useGlobalPkgs = true;

      # users.${config.user.name} = mkAliasDefinitions options.home.extraOptions;
    };

    # home.stateVersion = lib.mkDefault (osConfig.system.stateVersion or "23.11");

    # environment.persistence."/persist".users.${config.user.name} = mkIf options.impermanence.enable.value (mkAliasDefinitions options.home.persist);
  };

}
